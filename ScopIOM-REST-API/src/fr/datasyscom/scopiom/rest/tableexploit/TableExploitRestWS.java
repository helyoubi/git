package fr.datasyscom.scopiom.rest.tableexploit;

import java.net.URI;
import java.util.ArrayList;
import java.util.List;

import javax.ejb.EJB;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.GenericEntity;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;

import fr.datasyscom.pome.ejbentity.filter.TableExploitFilter;
import fr.datasyscom.pome.ejbentity.tableexploit.TableExploit;
import fr.datasyscom.pome.ejbsession.tableexploit.TableExploitDto;
import fr.datasyscom.pome.ejbsession.tableexploit.TableExploitManagerLocal;
import fr.datasyscom.pome.exception.ValidationException;
import fr.datasyscom.scopiom.rest.pojo.TableExploitDtoRest;

@Path("/tableExploit")
public class TableExploitRestWS {

	@EJB
	TableExploitManagerLocal tableExploitLocale;

	@Context
	UriInfo uriInfo;

	/**
	 * 
	 * Ajout d'une table d'exploitation
	 * 
	 * @param tableExploitDto
	 * @return created 201
	 */
	@POST
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	public Response createTableExploit(TableExploitDtoRest tableExploitDto) {
		if (tableExploitDto == null) {
			return Response.status(Response.Status.BAD_REQUEST).build();
		}
		TableExploit newTableExploit;
		try {
			TableExploitDto tableExploit = new TableExploitDto(tableExploitDto.getName(),
					tableExploitDto.getDescription());
			newTableExploit = tableExploitLocale.save(tableExploit);
		} catch (ValidationException e) {
			return Response.status(Response.Status.NOT_FOUND).entity(e.getMessage()).build();
		}
		String newNameTableExploit = String.valueOf(newTableExploit.getName());
		URI uri = uriInfo.getAbsolutePathBuilder().path(newNameTableExploit).build();

		return Response.created(uri).build();
	}

	/**
	 * 
	 * Retourne une table d'exploitation par son nom
	 * 
	 * @param nameTableExploit
	 * @return OK
	 */
	@GET
	@Path("/{nameTableExploit}")
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	public Response retriveTableExploit(@PathParam("nameTableExploit") String nameTableExploit) {
		TableExploitDtoRest tableExploitDto;
		TableExploitFilter filterTableExploit = TableExploitFilter.all();
		try {
			TableExploit tableExploit = tableExploitLocale
					.retrieveTableExploit(filterTableExploit.byName(nameTableExploit));
			tableExploitDto = new TableExploitDtoRest(tableExploit);
		} catch (ValidationException e) {
			return Response.status(Response.Status.NOT_FOUND).entity(e.getMessage()).build();
		}
		return Response.ok(tableExploitDto).build();
	}

	/**
	 * 
	 * Suppression de la table d'exploitation
	 * 
	 * @param nameTableExploit
	 * @return noContent 204
	 */
	@DELETE
	@Path("/{nameTableExploit}")
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	public Response deleteTableExploit(@PathParam("nameTableExploit") String nameTableExploit) {
		TableExploitFilter filterTableExploit = TableExploitFilter.all();
		try {
			TableExploit tableExploit = tableExploitLocale
					.retrieveTableExploit(filterTableExploit.byName(nameTableExploit));
			TableExploitDtoRest tableExploitDto = new TableExploitDtoRest(tableExploit);
			tableExploitLocale.deleteTable(tableExploitDto.getId());
		} catch (ValidationException e) {
			return Response.status(Response.Status.NOT_FOUND).entity(e.getMessage()).build();
		}
		return Response.noContent().build();
	}

	/**
	 * Retourne la liste des tables d exploitations
	 * 
	 * @param idTableExploit
	 * @return OK
	 */
	@GET
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	public Response retrieveAllTableExploit(@QueryParam("id") long idTableExploit) {
		List<TableExploitDtoRest> tableExploitDtos = new ArrayList<TableExploitDtoRest>();
		if (idTableExploit != 0) {
			try {
				tableExploitDtos.add(new TableExploitDtoRest(tableExploitLocale.retrieveTable(idTableExploit)));
			} catch (Exception e) {
				return Response.status(Response.Status.NOT_FOUND).entity(e.getMessage()).build();
			}
		} else {
			List<TableExploit> listTableExploit = tableExploitLocale.retrieveTables();
			for (TableExploit tableExploit : listTableExploit) {
				tableExploitDtos.add(new TableExploitDtoRest(tableExploit));
			}
		}
		GenericEntity<List<TableExploitDtoRest>> listRestTableExploit = new GenericEntity<List<TableExploitDtoRest>>(
				tableExploitDtos) {
		};
		return Response.ok(listRestTableExploit).build();
	}

}
