package fr.datasyscom.scopiom.restclient.test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import org.junit.BeforeClass;
import org.junit.Test;

import fr.datasyscom.pome.exception.ValidationException;
import fr.datasyscom.scopiom.rest.pojo.TableExploitDtoRest;
import fr.datasyscom.scopiom.restclient.exception.RestException;
import fr.datasyscom.scopiom.restclient.server.ScopIOMServer;
import fr.datasyscom.scopiom.restclient.tableexploit.TableExploitClient;

public class TableExploitJUnitTests {

	// new tableExploit
	private final String NEW_TABLEEXPLOIT_NAME = "NAMETABLEEXPLOIT-" + System.currentTimeMillis();
	private final String NEW_TABLEEXPLOIT_DESC = "descTableExploit";
	private static ScopIOMServer serveur;

	@BeforeClass
	public static void init() {
		serveur = new ScopIOMServer("http://localhost:4848/scopiom/rest/", "iomadmin", "iomadmin");
	}

	@Test
	public void testTableExploit() throws ValidationException, RestException {
		TableExploitClient tableExploitClient = serveur.tableExploit();
		// Création de la table d'exploit
		int initialTableExploitCount = tableExploitClient.all().size();
		TableExploitDtoRest tableExploitDto = new TableExploitDtoRest();
		tableExploitDto.setName(NEW_TABLEEXPLOIT_NAME);
		tableExploitDto.setDescription(NEW_TABLEEXPLOIT_DESC);
		tableExploitDto = tableExploitClient.create(tableExploitDto);
		long idTableExploitCreated = tableExploitDto.getId();
		//check list 
		assertEquals("Erreur au niveau de la liste des tables d'exploitations", initialTableExploitCount + 1,
				tableExploitClient.all().size());
		// Récupération par id
		tableExploitDto = tableExploitClient.byId(idTableExploitCreated);
		assertEquals("Mauvais nom", NEW_TABLEEXPLOIT_NAME, tableExploitDto.getName());
		assertEquals("Mauvais libellé", NEW_TABLEEXPLOIT_DESC, tableExploitDto.getDescription());
		// delete
		System.out.println(NEW_TABLEEXPLOIT_NAME + " = " + tableExploitDto.getName());
		tableExploitClient.delete(NEW_TABLEEXPLOIT_NAME);
		System.out.println(NEW_TABLEEXPLOIT_NAME + " = " + tableExploitDto.getName());
		try {
			tableExploitClient.byName(NEW_TABLEEXPLOIT_NAME);
			fail("Suppression table exploit ko");
		} catch (RestException e) {
			assertEquals("Wrong HTTP status", 404, e.getHttpCode().intValue());
		}
	}

	@Test(expected = RestException.class)
	public void testTableExploit_NotFound_ByName() throws ValidationException, RestException {
		TableExploitClient tableExploit = serveur.tableExploit();
		tableExploit.byName(NEW_TABLEEXPLOIT_NAME);
	}

	@Test(expected = ValidationException.class)
	public void testTableExploit_Empty_ByName() throws ValidationException, RestException {
		TableExploitClient tableExploit = serveur.tableExploit();
		tableExploit.byName("");
	}

	@Test(expected = RestException.class)
	public void testTableExploit_NotFound_ById() throws RestException {
		TableExploitClient tableExploit = serveur.tableExploit();
		tableExploit.byId(System.currentTimeMillis());
	}

	@Test(expected = ValidationException.class)
	public void testTableExploit_Empty_For_Create() throws ValidationException, RestException {
		TableExploitClient tableExploit = serveur.tableExploit();
		TableExploitDtoRest tableExploitDto = new TableExploitDtoRest();
		tableExploitDto.setName("");
		tableExploit.create(tableExploitDto);
	}

	@Test(expected = RestException.class)
	public void testTableExploit_NotFound_For_Delete() throws RestException, ValidationException {
		TableExploitClient tableExploit = serveur.tableExploit();
		tableExploit.delete(NEW_TABLEEXPLOIT_NAME);
	}

	@Test(expected = ValidationException.class)
	public void testTableExploit_Empty_For_Delete() throws RestException, ValidationException {
		TableExploitClient tableExploit = serveur.tableExploit();
		tableExploit.delete("");
	}

}
