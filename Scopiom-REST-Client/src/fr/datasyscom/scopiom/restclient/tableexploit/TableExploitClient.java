package fr.datasyscom.scopiom.restclient.tableexploit;

import java.util.List;

import javax.ws.rs.core.MediaType;
import fr.datasyscom.pome.exception.ValidationException;

import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.GenericType;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.api.client.WebResource.Builder;

import fr.datasyscom.scopiom.rest.pojo.TableExploitDtoRest;
import fr.datasyscom.scopiom.restclient.exception.RestException;

public class TableExploitClient {

	WebResource baseWebRessource;

	public TableExploitClient(WebResource baseWebRessource) {
		this.baseWebRessource = baseWebRessource;
	}

	/**
	 * 
	 * Récupération de la table d'exploitation par son nom
	 * 
	 * @param nameTableExploit : nom de la table d'exploitation
	 * @return TableExploitDto
	 * @throws RestException       : nom de la table d'exploitation n'existe pas ou
	 *                             erreur au niveau du serveur (code différent de
	 *                             200 OK)
	 * @throws ValidationException : nom de la null ou vide
	 */
	public TableExploitDtoRest byName(String nameTableExploit) throws RestException, ValidationException {
		if (nameTableExploit == null || nameTableExploit.isEmpty()) {
			throw new ValidationException("Table d'exploitation is empty or null");
		}
		Builder builder = baseWebRessource.path("tableExploit/" + nameTableExploit).accept(MediaType.APPLICATION_JSON);
		ClientResponse response = builder.get(ClientResponse.class);
		if (response.getStatus() != 200) {
			throw new RestException(response);
		}
		GenericType<TableExploitDtoRest> tableExploitGeneric = new GenericType<TableExploitDtoRest>() {
		};
		return response.getEntity(tableExploitGeneric);
	}

	/**
	 * 
	 * Récupération de la table d'exploitation par son identifiant
	 * 
	 * @param id : identifiant de la table d'exploitation
	 * @return TableExploitDto
	 * @throws RestException : Identifiant de la table d'exploitation n'existe pas
	 *                       ou erreur au niveau du serveur (code différent de 200
	 *                       OK)
	 */
	public TableExploitDtoRest byId(long id) throws RestException {
		Builder builder = baseWebRessource.path("tableExploit").queryParam("id", String.valueOf(id))
				.accept(MediaType.APPLICATION_JSON);
		ClientResponse response = builder.get(ClientResponse.class);
		if (response.getStatus() != 200) {
			throw new RestException(response);
		}
		GenericType<List<TableExploitDtoRest>> lisTableExploitsDto = new GenericType<List<TableExploitDtoRest>>() {
		};
		List<TableExploitDtoRest> TableExploitList = response.getEntity(lisTableExploitsDto);
		return TableExploitList.get(0);
	}

	/**
	 * 
	 * Création d'une table d'exploitation
	 * 
	 * @param tableExploitDto
	 * @return TableExploitDtoRest
	 * @throws RestException       : Erreur lors de la création de la table
	 *                             d'exploit ou niveau serveur (code différent de
	 *                             201 Created)
	 * @throws ValidationException : nom de la table Exploit est vide ou nul
	 */
	public TableExploitDtoRest create(TableExploitDtoRest tableExploitDto) throws RestException, ValidationException {
		if (tableExploitDto.getName() == null || tableExploitDto.getName().isEmpty()) {
			throw new ValidationException("Table Exploit name is empty or null");
		}
		Builder builder = baseWebRessource.path("tableExploit").accept(MediaType.APPLICATION_JSON);
		ClientResponse response = builder.post(ClientResponse.class, tableExploitDto);
		if (response.getStatus() != 201) {
			throw new RestException(response);
		}
		return byName(tableExploitDto.getName());
	}

	/**
	 * 
	 * Suppression d'une table d'exploitation
	 * 
	 * @param nameTableExploit : nom de la table d'exploitation
	 * @throws RestException       : nom de la table d'exploit n'existe pas ou
	 *                             erreur au niveau du serveur (code différent de
	 *                             204 NoContent)
	 * @throws ValidationException : nom de la table d'exploitation est null ou vide
	 */
	public void delete(String nameTableExploit) throws RestException, ValidationException {
		if (nameTableExploit == null || nameTableExploit.isEmpty()) {
			throw new ValidationException("Table exploit name is empty or null");
		}
		Builder builder = baseWebRessource.path("tableExploit/" + nameTableExploit).accept(MediaType.APPLICATION_JSON);
		ClientResponse response = builder.delete(ClientResponse.class);
		if (response.getStatus() != 204) {
			throw new RestException(response);
		}
	}

	/**
	 * 
	 * Suppression d'une table d'exploitation
	 * 
	 * @param tableExploitDto
	 * @throws RestException       : nom de la table d'exploit n'existe pas ou
	 *                             erreur au niveau du serveur (code différent de
	 *                             204 NoContent)
	 * @throws ValidationException : nom de la table d'exploitation est null ou vide
	 */
	public void delete(TableExploitDtoRest tableExploitDto) throws RestException, ValidationException {
		delete(tableExploitDto.getName());
	}

	/**
	 * 
	 * Récupération de la liste des tables d'exploitations
	 * 
	 * @return List TableExploitDto
	 * @throws RestException : Erreur au niveau du serveur (code différent de 200
	 *                       OK)
	 */
	public List<TableExploitDtoRest> all() throws RestException {
		Builder builder = baseWebRessource.path("tableExploit").accept(MediaType.APPLICATION_JSON);
		ClientResponse response = builder.get(ClientResponse.class);
		if (response.getStatus() != 200) {
			throw new RestException(response);
		}
		GenericType<List<TableExploitDtoRest>> listTableExploitDto = new GenericType<List<TableExploitDtoRest>>() {
		};
		List<TableExploitDtoRest> tableExploitList = response.getEntity(listTableExploitDto);
		return tableExploitList;
	}

}
