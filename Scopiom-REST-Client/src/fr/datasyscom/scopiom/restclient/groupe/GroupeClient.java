package fr.datasyscom.scopiom.restclient.groupe;

import java.util.List;

import javax.ws.rs.core.MediaType;

import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.GenericType;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.api.client.WebResource.Builder;

import fr.datasyscom.pome.exception.ValidationException;
import fr.datasyscom.scopiom.rest.pojo.AgencyDto;
import fr.datasyscom.scopiom.rest.pojo.DeviceDto;
import fr.datasyscom.scopiom.rest.pojo.GroupeDto;
import fr.datasyscom.scopiom.rest.pojo.QueueDto;
import fr.datasyscom.scopiom.rest.pojo.UserDto;
import fr.datasyscom.scopiom.rest.pojo.WorkflowDto;
import fr.datasyscom.scopiom.restclient.exception.RestException;

public class GroupeClient {

	WebResource baseWebRessource;

	public GroupeClient(WebResource baseWebRessource) {
		this.baseWebRessource = baseWebRessource;
	}

	/**
	 * 
	 * Récupération de la liste des groupes
	 * 
	 * 
	 * @return List GroupeDto
	 * @throws RestException : erreur au niveau du serveur (code différent de 200
	 *                       OK)
	 */
	public List<GroupeDto> all() throws RestException {
		Builder builder = baseWebRessource.path("groups").accept(MediaType.APPLICATION_JSON);
		ClientResponse response = builder.get(ClientResponse.class);
		if (response.getStatus() != 200) {
			throw new RestException(response);
		}
		GenericType<List<GroupeDto>> groupsList = new GenericType<List<GroupeDto>>() {
		};
		List<GroupeDto> groupeDtos = response.getEntity(groupsList);
		return groupeDtos;
	}

	/**
	 * 
	 * Récupération du groupe par son identifiant
	 * 
	 * @param id : identifiant du groupe
	 * @return GroupeDto
	 * @throws RestException : Identifiant du groupe n'existe pas ou erreur au
	 *                       niveau du serveur (code différent de 200 OK)
	 */
	public GroupeDto byId(long id) throws RestException {
		GroupeDto groupeDto = null;
		Builder builder = baseWebRessource.path("groups").queryParam("id", String.valueOf(id))
				.accept(MediaType.APPLICATION_JSON);
		ClientResponse response = builder.get(ClientResponse.class);
		if (response.getStatus() != 200) {
			throw new RestException(response);
		}
		GenericType<List<GroupeDto>> listgroupsDto = new GenericType<List<GroupeDto>>() {
		};
		List<GroupeDto> groupsList = response.getEntity(listgroupsDto);
		groupeDto = groupsList.get(0);

		return groupeDto;
	}

	/**
	 * 
	 * Récupération du groupe par son nom
	 * 
	 * @param nameGroup : nom du groupe
	 * @return GroupeDto
	 * @throws RestException       : nom du groupe n'existe pas ou erreur au niveau
	 *                             du serveur (code différent de 200 OK)
	 * @throws ValidationException : nom du groupe est null ou vide
	 */
	public GroupeDto byName(String nameGroup) throws RestException, ValidationException {
		GroupeDto groupeDto = null;
		if (nameGroup != null && !nameGroup.isEmpty()) {
			Builder builder = baseWebRessource.path("groups/" + nameGroup).accept(MediaType.APPLICATION_JSON);
			ClientResponse response = builder.get(ClientResponse.class);
			if (response.getStatus() != 200) {
				throw new RestException(response);
			}
			GenericType<GroupeDto> groupGeneric = new GenericType<GroupeDto>() {
			};
			groupeDto = response.getEntity(groupGeneric);
			return groupeDto;
		} else {
			throw new ValidationException("Group name is empty or null");
		}
	}

	/**
	 * 
	 * Suppression d'un groupe
	 * 
	 * @param nameGroup : nom du groupe
	 * @throws RestException       : nom du groupe n'existe pas ou erreur au niveau
	 *                             du serveur (code différent de 204 NoContent)
	 * @throws ValidationException :nom du groupe null ou vide
	 */
	public void delete(String nameGroup) throws RestException, ValidationException {
		if (nameGroup != null && !nameGroup.isEmpty()) {
			Builder builder = baseWebRessource.path("groups/" + nameGroup).accept(MediaType.APPLICATION_JSON);
			ClientResponse response = builder.delete(ClientResponse.class);
			if (response.getStatus() != 204) {
				throw new RestException(response);
			}
		} else {
			throw new ValidationException("Group name empty or null");
		}
	}

	/**
	 * 
	 * Suppression d'un groupe
	 * 
	 * @param groupeDto
	 * @throws RestException       : nom du groupe n'existe pas ou erreur au niveau
	 *                             du serveur (code différent de 204 NoContent)
	 * @throws ValidationException :nom du groupe null ou vide
	 */
	public void delete(GroupeDto groupeDto) throws RestException, ValidationException {
		delete(groupeDto.getName());
	}

	/**
	 * 
	 * ajout d'un utilisateur
	 * 
	 * @param nameGroup : nom du groupe
	 * @param loginUser : login d'utilisateur
	 * @throws RestException       : nom du groupe ou login utilisateur n'existe pas
	 *                             ,ou erreur au niveau du serveur (code différent
	 *                             de 200 Ok)
	 * @throws ValidationException : nom du groupe ou login utilisateur sont null ou
	 *                             vides
	 */
	public void addUser(String nameGroup, String loginUser) throws RestException, ValidationException {
		if (nameGroup != null && !nameGroup.isEmpty() && loginUser != null && !loginUser.isEmpty()) {
			Builder builder = baseWebRessource.path("groups/" + nameGroup + "/user/" + loginUser)
					.accept(MediaType.APPLICATION_JSON);
			ClientResponse response = builder.post(ClientResponse.class);
			if (response.getStatus() != 200) {
				throw new RestException(response);
			}
		} else {
			throw new ValidationException("Group name or user login are empty or null");
		}
	}

	/**
	 * 
	 * ajout d'un utilisateur
	 * 
	 * @param groupeDto
	 * @param userDto
	 * @throws RestException       : nom du groupe ou login utilisateur n'existe pas
	 *                             ,ou erreur au niveau du serveur (code différent
	 *                             de 200 Ok)
	 * @throws ValidationException : nom du groupe ou login utilisateur sont null ou
	 *                             vides
	 */
	public void addUser(GroupeDto groupeDto, UserDto userDto) throws RestException, ValidationException {
		addUser(groupeDto.getName(), userDto.getLogin());
	}

	/**
	 * 
	 * ajout d'une agence liée
	 * 
	 * @param nameGroup  : nom du groupe
	 * @param nameAgency : nom de l'agence
	 * @throws RestException       : nom du groupe ou d'agence n'existe pas ,ou
	 *                             erreur au niveau du serveur (code différent de
	 *                             200 Ok)
	 * @throws ValidationException : nom du groupe ou agence sont null ou vides
	 */
	public void addUserAgency(String nameGroup, String nameAgency) throws RestException, ValidationException {
		if (nameGroup != null && !nameGroup.isEmpty() && nameAgency != null && !nameAgency.isEmpty()) {
			Builder builder = baseWebRessource.path("groups/" + nameGroup + "/userAgency/" + nameAgency)
					.accept(MediaType.APPLICATION_JSON);
			ClientResponse response = builder.post(ClientResponse.class);
			if (response.getStatus() != 200) {
				throw new RestException(response);
			}
		} else {
			throw new ValidationException("Group name or agency are empty or null");
		}
	}

	/**
	 * 
	 * ajout d'une agence liée
	 * 
	 * @param groupeDto
	 * @param agencyDto
	 * @throws RestException       : nom du groupe ou d'agence n'existe pas ,ou
	 *                             erreur au niveau du serveur (code différent de
	 *                             200 Ok)
	 * @throws ValidationException : nom du groupe ou agence sont null ou vides
	 */
	public void addUserAgency(GroupeDto groupeDto, AgencyDto agencyDto) throws RestException, ValidationException {
		addUserAgency(groupeDto.getName(), agencyDto.getName());
	}

	/**
	 * 
	 * ajout d'une file de traitement
	 * 
	 * @param nameGroup : nom du groupe
	 * @param nameQueue : nom de la file de traitement
	 * @throws RestException       : nom du groupe ou de la file de traitement
	 *                             n'existe pas ,ou erreur au niveau du serveur
	 *                             (code différent de 200 Ok)
	 * @throws ValidationException : nom du groupe ou de la file de traitement sont
	 *                             null ou vides
	 */
	public void addQueue(String nameGroup, String nameQueue) throws RestException, ValidationException {
		if (nameGroup != null && !nameGroup.isEmpty() && nameQueue != null && !nameQueue.isEmpty()) {
			Builder builder = baseWebRessource.path("groups/" + nameGroup + "/queues/" + nameQueue)
					.accept(MediaType.APPLICATION_JSON);
			ClientResponse response = builder.post(ClientResponse.class);
			if (response.getStatus() != 200) {
				throw new RestException(response);
			}
		} else {
			throw new ValidationException("Group name or queue are empty or null");
		}
	}

	/**
	 * 
	 * ajout d'une file de traitement
	 * 
	 * @param groupeDto
	 * @param queueDto
	 * @throws RestException       : nom du groupe ou de la file de traitement
	 *                             n'existe pas ,ou erreur au niveau du serveur
	 *                             (code différent de 200 Ok)
	 * @throws ValidationException : nom du groupe ou de la file de traitement sont
	 *                             null ou vides
	 */
	public void addQueue(GroupeDto groupeDto, QueueDto queueDto) throws RestException, ValidationException {
		addQueue(groupeDto.getName(), queueDto.getName());
	}

	/**
	 * 
	 * ajout d'un périphérique
	 * 
	 * @param nameGroup  : nom du groupe
	 * @param nameDevice : nom du périphérique
	 * @throws RestException       : nom du groupe ou du périphérique n'existe pas
	 *                             ,ou erreur au niveau du serveur (code différent
	 *                             de 200 Ok)
	 * @throws ValidationException : nom du groupe ou du périphérique sont null ou
	 *                             vides
	 */
	public void addDevice(String nameGroup, String nameDevice) throws RestException, ValidationException {
		if (nameGroup != null && !nameGroup.isEmpty() && nameDevice != null && !nameDevice.isEmpty()) {
			Builder builder = baseWebRessource.path("groups/" + nameGroup + "/devices/" + nameDevice)
					.accept(MediaType.APPLICATION_JSON);
			ClientResponse response = builder.post(ClientResponse.class);
			if (response.getStatus() != 200) {
				throw new RestException(response);
			}
		} else {
			throw new ValidationException("Group name or device are empty or null");
		}
	}

	/**
	 * 
	 * ajout d'un périphérique
	 * 
	 * @param groupeDto
	 * @param deviceDto
	 * @throws RestException       : nom du groupe ou du périphérique n'existe pas
	 *                             ,ou erreur au niveau du serveur (code différent
	 *                             de 200 Ok)
	 * @throws ValidationException : nom du groupe ou du périphérique sont null ou
	 *                             vides
	 */
	public void addDevice(GroupeDto groupeDto, DeviceDto deviceDto) throws RestException, ValidationException {
		addDevice(groupeDto.getName(), deviceDto.getName());
	}

	/**
	 * 
	 * ajout d'une agence d'administration
	 * 
	 * @param nameGroup  : nom du groupe
	 * @param nameAgency : nom d'agence
	 * @throws RestException       : nom du groupe ou agence n'existe pas ,ou erreur
	 *                             au niveau du serveur (code différent de 200 Ok)
	 * @throws ValidationException : nom du groupe ou agence sont null ou vides
	 */
	public void addAdminAgency(String nameGroup, String nameAgency) throws RestException, ValidationException {
		if (nameGroup != null && !nameGroup.isEmpty() && nameAgency != null && !nameAgency.isEmpty()) {
			Builder builder = baseWebRessource.path("groups/" + nameGroup + "/adminAgency/" + nameAgency)
					.accept(MediaType.APPLICATION_JSON);
			ClientResponse response = builder.post(ClientResponse.class);
			if (response.getStatus() != 200) {
				throw new RestException(response);
			}
		} else {
			throw new ValidationException("Group name or admin agency are empty or null");
		}
	}

	/**
	 * 
	 * ajout d'une agence d'administration
	 * 
	 * @param groupeDto
	 * @param agencyDto
	 * @throws RestException       : nom du groupe ou agence n'existe pas ,ou erreur
	 *                             au niveau du serveur (code différent de 200 Ok)
	 * @throws ValidationException : nom du groupe ou agence sont null ou vides
	 */
	public void addAdminAgency(GroupeDto groupeDto, AgencyDto agencyDto) throws RestException, ValidationException {
		addAdminAgency(groupeDto.getName(), agencyDto.getName());
	}

	/**
	 * 
	 * ajout du workflow
	 * 
	 * @param nameGroup    : nom du groupe
	 * @param nameWorkflow : nom du flux de travail
	 * @throws RestException       : nom du groupe ou du flux de travail n'existe
	 *                             pas ,ou erreur au niveau du serveur (code
	 *                             différent de 200 Ok)
	 * @throws ValidationException : nom du groupe ou du flux de travail sont null
	 *                             ou vides
	 */
	public void addWorkflow(String nameGroup, String nameWorkflow) throws RestException, ValidationException {
		if (nameGroup != null && !nameGroup.isEmpty() && nameWorkflow != null && !nameWorkflow.isEmpty()) {
			Builder builder = baseWebRessource.path("groups/" + nameGroup + "/workflows/" + nameWorkflow)
					.accept(MediaType.APPLICATION_JSON);
			ClientResponse response = builder.post(ClientResponse.class);
			if (response.getStatus() != 200) {
				throw new RestException(response);
			}
		} else {
			throw new ValidationException("Group name or workflow name are empty or null");
		}
	}

	/**
	 * ajout du workflow
	 *                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ram
	 * 
	 * @param groupeDto
	 * @param workflowDto
	 * @throws RestException       : nom du groupe ou nom du flux de travail
	 *                             n'existe pas ,ou erreur au niveau du serveur
	 *                             (code différent de 200 Ok)
	 * @throws ValidationException : nom du groupe ou nom du flux de travail sont
	 *                             null ou vides
	 */
	public void addWorkflow(GroupeDto groupeDto, WorkflowDto workflowDto) throws RestException, ValidationException {
		addWorkflow(groupeDto.getName(), workflowDto.getNom());
	}

	/**
	 * 
	 * Suppression d'un flux de travail du groupe
	 * 
	 * @param nameGrp   : nom du groupe
	 * @param loginUser : login d'utilisateur
	 * @throws RestException       : nom du groupe ou du flux de travail n'existe
	 *                             pas ,ou erreur au niveau du serveur (code
	 *                             différent de 204 NoContent)
	 * @throws ValidationException : nom du groupe ou du flux de travail sont null
	 *                             ou vides
	 */
	public void removeWorkflow(String nameGrp, String nameWorkflow) throws RestException, ValidationException {
		if (nameGrp != null && !nameGrp.isEmpty() && nameWorkflow != null && !nameWorkflow.isEmpty()) {
			Builder builder = baseWebRessource.path("groups/" + nameGrp + "/workflows/" + nameWorkflow)
					.accept(MediaType.APPLICATION_JSON);
			ClientResponse response = builder.delete(ClientResponse.class);
			if (response.getStatus() != 204) {
				throw new RestException(response);
			}
		} else {
			throw new ValidationException("Group name or wo rkflow are empty or null");
		}
	}

	/**
	 * 
	 * Suppression d'un flux de travail du groupe
	 * 
	 * @param groupeDto
	 * @param workflowDto
	 * @throws RestException       : nom du groupe ou du flux de travail n'existe
	 *                             pas ,ou erreur au niveau du serveur (code
	 *                             différent de 204 NoContent)
	 * @throws ValidationException : nom du groupe ou du flux de travail sont null
	 *                             ou vides
	 */
	public void removeWorkflow(GroupeDto groupeDto, WorkflowDto workflowDto) throws RestException, ValidationException {
		removeWorkflow(groupeDto.getName(), workflowDto.getNom());
	}

	/**
	 * 
	 * Suppression d'un périphérique du groupe
	 * 
	 * @param nameGrp    : nom du groupe
	 * @param deviceName : nom du périphérique
	 * @throws RestException       : nom du groupe ou périphérique n'existe pas ,ou
	 *                             erreur au niveau du serveur (code différent de
	 *                             204 NoContent)
	 * @throws ValidationException : nom du groupe ou périphérique sont null ou
	 *                             vides
	 */
	public void removeDevice(String nameGrp, String deviceName) throws RestException, ValidationException {
		if (nameGrp != null && !nameGrp.isEmpty() && deviceName != null && !deviceName.isEmpty()) {
			Builder builder = baseWebRessource.path("groups/" + nameGrp + "/devices/" + deviceName)
					.accept(MediaType.APPLICATION_JSON);
			ClientResponse response = builder.delete(ClientResponse.class);
			if (response.getStatus() != 204) {
				throw new RestException(response);
			}
		} else {
			throw new ValidationException("Group name or device are empty or null");
		}
	}

	/**
	 * 
	 * retire un utilisateur du groupe
	 * 
	 * @param nameGrp   : nom du groupe
	 * @param loginUser : login d'utilisateur
	 * @throws RestException       : nom du groupe ou login utilisateur n'existe pas
	 *                             ,ou erreur au niveau du serveur (code différent
	 *                             de 204 NoContent)
	 * @throws ValidationException : nom du groupe ou login utilisateur sont null ou
	 *                             vides
	 */
	public void removeUser(String nameGrp, String loginUser) throws RestException, ValidationException {
		if (nameGrp != null && !nameGrp.isEmpty() && loginUser != null && !loginUser.isEmpty()) {
			Builder builder = baseWebRessource.path("groups/" + nameGrp + "/user/" + loginUser)
					.accept(MediaType.APPLICATION_JSON);
			ClientResponse response = builder.delete(ClientResponse.class);
			if (response.getStatus() != 204) {
				throw new RestException(response);
			}
		} else {
			throw new ValidationException("Group name or login user are empty or null");
		}
	}

	/**
	 * 
	 * Récupération des agence administrables
	 * 
	 * @param nameGroup : nom du groupe
	 * @return List AgencyDto
	 * @throws RestException       : nom du groupe n'existe pas ou erreur au niveau
	 *                             du serveur (code différent de 200 OK)
	 * @throws ValidationException : nom du groupe est null ou vide
	 */
	public List<AgencyDto> retrieveAdminAgencies(String nameGroup) throws RestException, ValidationException {
		List<AgencyDto> agencyDtos;
		if (nameGroup != null && !nameGroup.isEmpty()) {
			Builder builder = baseWebRessource.path("groups/" + nameGroup + "/adminagency")
					.accept(MediaType.APPLICATION_JSON);
			ClientResponse response = builder.get(ClientResponse.class);
			if (response.getStatus() != 200) {
				throw new RestException(response);
			}
			GenericType<List<AgencyDto>> agencyGenericList = new GenericType<List<AgencyDto>>() {
			};
			agencyDtos = response.getEntity(agencyGenericList);
			return agencyDtos;
		} else {
			throw new ValidationException("Group name is empty or null");
		}
	}

	/**
	 * 
	 * Récupération des agence administrables
	 * 
	 * @param groupeDto
	 * @return List AgencyDto
	 * @throws RestException       : nom du groupe n'existe pas ou erreur au niveau
	 *                             du serveur (code différent de 200 OK)
	 * @throws ValidationException : nom du groupe est null ou vide
	 */
	public List<AgencyDto> retrieveAdminAgencies(GroupeDto groupeDto) throws RestException, ValidationException {
		return retrieveAdminAgencies(groupeDto.getName());
	}

	/**
	 * 
	 * Récupération des agence liées
	 * 
	 * @param nameGroup : nom du groupe
	 * @return List AgencyDto
	 * @throws RestException       : nom du groupe n'existe pas ou erreur au niveau
	 *                             du serveur (code différent de 200 OK)
	 * @throws ValidationException : nom du groupe est null ou vide
	 */
	public List<AgencyDto> retrieveUserAgencies(String nameGroup) throws RestException, ValidationException {
		List<AgencyDto> agencyDtos;
		if (nameGroup != null && !nameGroup.isEmpty()) {
			Builder builder = baseWebRessource.path("groups/" + nameGroup + "/useragency")
					.accept(MediaType.APPLICATION_JSON);
			ClientResponse response = builder.get(ClientResponse.class);
			if (response.getStatus() != 200) {
				throw new RestException(response);
			}
			GenericType<List<AgencyDto>> agencyGenericList = new GenericType<List<AgencyDto>>() {
			};
			agencyDtos = response.getEntity(agencyGenericList);
			return agencyDtos;
		} else {
			throw new ValidationException("Group name is empty or null");
		}
	}

	/**
	 * 
	 * Récupération des agence liées
	 * 
	 * @param groupeDto
	 * @return List AgencyDto
	 * @throws RestException       : nom du groupe n'existe pas ou erreur au niveau
	 *                             du serveur (code différent de 200 OK)
	 * @throws ValidationException : nom du groupe est null ou vide
	 */
	public List<AgencyDto> retrieveUserAgencies(GroupeDto groupeDto) throws RestException, ValidationException {
		return retrieveUserAgencies(groupeDto.getName());
	}

	/**
	 * 
	 * Récupération des utilisateurs
	 * 
	 * @param nameGroup : nom du groupe
	 * @return List UserDto
	 * @throws RestException       : nom du groupe n'existe pas ou erreur au niveau
	 *                             du serveur (code différent de 200 OK)
	 * @throws ValidationException : nom du groupe est null ou vide
	 */
	public List<UserDto> retrieveUsers(String nameGroup) throws RestException, ValidationException {
		List<UserDto> userDtos;
		if (nameGroup != null && !nameGroup.isEmpty()) {
			Builder builder = baseWebRessource.path("groups/" + nameGroup + "/users")
					.accept(MediaType.APPLICATION_JSON);
			ClientResponse response = builder.get(ClientResponse.class);
			if (response.getStatus() != 200) {
				throw new RestException(response);
			}
			GenericType<List<UserDto>> userGenericList = new GenericType<List<UserDto>>() {
			};
			userDtos = response.getEntity(userGenericList);
			return userDtos;
		} else {
			throw new ValidationException("Group name is empty or null");
		}
	}

	/**
	 * 
	 * Récupération des utilisateurs
	 * 
	 * @param groupeDto
	 * @return List UserDto
	 * @throws RestException       : nom du groupe n'existe pas ou erreur au niveau
	 *                             du serveur (code différent de 200 OK)
	 * @throws ValidationException : nom du groupe est null ou vide
	 */
	public List<UserDto> retrieveUsers(GroupeDto groupeDto) throws RestException, ValidationException {
		return retrieveUsers(groupeDto.getName());
	}

	/**
	 * 
	 * Récupération des flux de travail
	 * 
	 * @param nameGroup : nom du groupe
	 * @return List WorkflowDto
	 * @throws RestException       : nom du groupe n'existe pas ou erreur au niveau
	 *                             du serveur (code différent de 200 OK)
	 * @throws ValidationException : nom du groupe est null ou vide
	 */
	public List<WorkflowDto> retrieveWorkflows(String nameGroup) throws RestException, ValidationException {
		List<WorkflowDto> workflowDtos;
		if (nameGroup != null && !nameGroup.isEmpty()) {
			Builder builder = baseWebRessource.path("groups/" + nameGroup + "/workflows")
					.accept(MediaType.APPLICATION_JSON);
			ClientResponse response = builder.get(ClientResponse.class);
			if (response.getStatus() != 200) {
				throw new RestException(response);
			}
			GenericType<List<WorkflowDto>> worklflowGenericList = new GenericType<List<WorkflowDto>>() {
			};
			workflowDtos = response.getEntity(worklflowGenericList);
			return workflowDtos;
		} else {
			throw new ValidationException("Group name is empty or null");
		}
	}

	/**
	 * 
	 * Récupération des flux de travail
	 * 
	 * @param groupeDto
	 * @return List WorkflowDto
	 * @throws RestException       : nom du groupe n'existe pas ou erreur au niveau
	 *                             du serveur (code différent de 200 OK)
	 * @throws ValidationException : nom du groupe est null ou vide
	 */
	public List<WorkflowDto> retrieveWorkflows(GroupeDto groupeDto) throws RestException, ValidationException {
		return retrieveWorkflows(groupeDto.getName());
	}

	/**
	 * 
	 * Récupération des périphériques
	 * 
	 * @param nameGroup : nom du groupe
	 * @return List DeviceDto
	 * @throws RestException       : nom du groupe n'existe pas ou erreur au niveau
	 *                             du serveur (code différent de 200 OK)
	 * @throws ValidationException : nom du groupe est null ou vide
	 */
	public List<DeviceDto> retrieveDevices(String nameGroup) throws RestException, ValidationException {
		List<DeviceDto> deviceDtos;
		if (nameGroup != null && !nameGroup.isEmpty()) {
			Builder builder = baseWebRessource.path("groups/" + nameGroup + "/devices")
					.accept(MediaType.APPLICATION_JSON);
			ClientResponse response = builder.get(ClientResponse.class);
			if (response.getStatus() != 200) {
				throw new RestException(response);
			}
			GenericType<List<DeviceDto>> deviceGenericList = new GenericType<List<DeviceDto>>() {
			};
			deviceDtos = response.getEntity(deviceGenericList);
			return deviceDtos;
		} else {
			throw new ValidationException("Group name is empty or null");
		}
	}

	/**
	 * 
	 * Récupération des périphériques
	 * 
	 * @param groupeDto
	 * @return List DeviceDto
	 * @throws RestException       : nom du groupe n'existe pas ou erreur au niveau
	 *                             du serveur (code différent de 200 OK)
	 * @throws ValidationException : nom du groupe est null ou vide
	 */
	public List<DeviceDto> retrieveDevices(GroupeDto groupeDto) throws RestException, ValidationException {
		return retrieveDevices(groupeDto.getName());
	}

	/**
	 * 
	 * Récupération des files de traitement
	 * 
	 * @param nameGroup : nom du groupe
	 * @return List QueueDto
	 * @throws RestException       : nom du groupe n'existe pas ou erreur au niveau
	 *                             du serveur (code différent de 200 OK)
	 * @throws ValidationException : nom du groupe est null ou vide
	 */
	public List<QueueDto> retrieveQueues(String nameGroup) throws RestException, ValidationException {
		List<QueueDto> queueDtos;
		if (nameGroup != null && !nameGroup.isEmpty()) {
			Builder builder = baseWebRessource.path("groups/" + nameGroup + "/queues")
					.accept(MediaType.APPLICATION_JSON);
			ClientResponse response = builder.get(ClientResponse.class);
			if (response.getStatus() != 200) {
				throw new RestException(response);
			}
			GenericType<List<QueueDto>> queueGenericList = new GenericType<List<QueueDto>>() {
			};
			queueDtos = response.getEntity(queueGenericList);
			return queueDtos;
		} else {
			throw new ValidationException("Queue name is empty or null");
		}
	}

	/**
	 * 
	 * Récupération des files de traitement
	 * 
	 * @param groupDto
	 * @return List QueueDto
	 * @throws RestException       : nom du groupe n'existe pas ou erreur au niveau
	 *                             du serveur (code différent de 200 OK)
	 * @throws ValidationException : nom du groupe est null ou vide
	 */
	public List<QueueDto> retrieveQueues(GroupeDto groupDto) throws RestException, ValidationException {
		return retrieveQueues(groupDto.getName());
	}

	/**
	 * 
	 * retire un utilisateur du groupe
	 * 
	 * @param groupeDto
	 * @param userDto
	 * @throws RestException       : nom du groupe ou login utilisateur n'existe pas
	 *                             ,ou erreur au niveau du serveur (code différent
	 *                             de 204 NoContent)
	 * @throws ValidationException : nom du groupe ou login utilisateur sont null ou
	 *                             vides
	 */
	public void removeUser(GroupeDto groupeDto, UserDto userDto) throws RestException, ValidationException {
		removeUser(groupeDto.getName(), userDto.getLogin());
	}

	/**
	 * 
	 * Suppression d'une file de traitement du groupe
	 * 
	 * @param nameGrp   : nom du groupe
	 * @param nameQueue : nom de la file de traitement
	 * @throws RestException       : nom du groupe ou file de traitement n'existe
	 *                             pas ,ou erreur au niveau du serveur (code
	 *                             différent de 204 NoContent)
	 * @throws ValidationException : nom du groupe ou file de traitement sont null
	 *                             ou vides
	 */
	public void removeQueue(String nameGrp, String nameQueue) throws RestException, ValidationException {
		if (nameGrp != null && !nameGrp.isEmpty() && nameQueue != null && !nameQueue.isEmpty()) {
			Builder builder = baseWebRessource.path("groups/" + nameGrp + "/queues/" + nameQueue)
					.accept(MediaType.APPLICATION_JSON);
			ClientResponse response = builder.delete(ClientResponse.class);
			if (response.getStatus() != 204) {
				throw new RestException(response);
			}
		} else {
			throw new ValidationException("Group name or queue are empty or null");
		}
	}

	/**
	 * 
	 * Suppression d'une file de traitement du groupe
	 * 
	 * @param groupeDto
	 * @param queueDto
	 * @throws RestException       : nom du groupe ou file de traitement n'existe
	 *                             pas ,ou erreur au niveau du serveur (code
	 *                             différent de 204 NoContent)
	 * @throws ValidationException : nom du groupe ou file de traitement sont null
	 *                             ou vides
	 */
	public void removeQueue(GroupeDto groupeDto, QueueDto queueDto) throws RestException, ValidationException {
		removeQueue(groupeDto.getName(), queueDto.getName());
	}

	/**
	 * 
	 * Suppression d'un périphérique du groupe
	 * 
	 * @param groupeDto
	 * @param deviceDto
	 * @throws RestException       : nom du groupe ou périphérique n'existe pas ,ou
	 *                             erreur au niveau du serveur (code différent de
	 *                             204 NoContent)
	 * @throws ValidationException : nom du groupe ou périphérique sont null ou
	 *                             vides
	 */
	public void removeDevice(GroupeDto groupeDto, DeviceDto deviceDto) throws RestException, ValidationException {
		removeDevice(groupeDto.getName(), deviceDto.getName());
	}

	/**
	 * 
	 * Suppression d'une agence administrable du groupe
	 * 
	 * @param nameGrp    : nom du groupe
	 * @param nameAgency : nom d'agence
	 * @throws RestException       : nom du groupe ou d'agence n'existe pas ,ou
	 *                             erreur au niveau du serveur (code différent de
	 *                             204 NoContent)
	 * @throws ValidationException : nom du groupe ou d'agence sont null ou vides
	 */
	public void removeAdminAgency(String nameGrp, String nameAgency) throws RestException, ValidationException {
		if (nameGrp != null && !nameGrp.isEmpty() && nameAgency != null && !nameAgency.isEmpty()) {
			Builder builder = baseWebRessource.path("groups/" + nameGrp + "/adminAgency/" + nameAgency)
					.accept(MediaType.APPLICATION_JSON);
			ClientResponse response = builder.delete(ClientResponse.class);
			if (response.getStatus() != 204) {
				throw new RestException(response);
			}
		} else {
			throw new ValidationException("Group name or agency are empty or null");
		}
	}

	/**
	 * 
	 * Suppression d'une agence administrable du groupe
	 * 
	 * @param groupeDto
	 * @param agencyDto
	 * @throws RestException       : nom du groupe ou d'agence n'existe pas ,ou
	 *                             erreur au niveau du serveur (code différent de
	 *                             204 NoContent)
	 * @throws ValidationException : nom du groupe ou d'agence sont null ou vides
	 */
	public void removeAdminAgency(GroupeDto groupeDto, AgencyDto agencyDto) throws RestException, ValidationException {
		removeAdminAgency(groupeDto.getName(), agencyDto.getName());
	}

	/**
	 * 
	 * Suppression d'une agence liée du groupe
	 * 
	 * @param nameGrp    : nom du groupe
	 * @param nameAgency : nom d'agence
	 * @throws RestException       : nom du groupe ou d'agence n'existe pas ,ou
	 *                             erreur au niveau du serveur (code différent de
	 *                             204 NoContent)
	 * @throws ValidationException : nom du groupe ou d'agence sont null ou vides
	 */
	public void removeUserAgency(String nameGrp, String nameAgency) throws RestException, ValidationException {
		if (nameGrp != null && !nameGrp.isEmpty() && nameAgency != null && !nameAgency.isEmpty()) {
			Builder builder = baseWebRessource.path("groups/" + nameGrp + "/userAgency/" + nameAgency)
					.accept(MediaType.APPLICATION_JSON);
			ClientResponse response = builder.delete(ClientResponse.class);
			if (response.getStatus() != 204) {
				throw new RestException(response);
			}
		} else {
			throw new ValidationException("Group name or agency are empty or null");
		}
	}

	/**
	 * 
	 * Suppression d'une agence liée du groupe
	 * 
	 * @param groupeDto
	 * @param agencyDto
	 * @throws RestException       : nom du groupe ou d'agence n'existe pas ,ou
	 *                             erreur au niveau du serveur (code différent de
	 *                             204 NoContent)
	 * @throws ValidationException : nom du groupe ou d'agence sont null ou vides
	 */
	public void removeUserAgency(GroupeDto groupeDto, AgencyDto agencyDto) throws RestException, ValidationException {
		removeUserAgency(groupeDto.getName(), agencyDto.getName());
	}

	/**
	 * 
	 * Création d'un groupe
	 * 
	 * @param groupeDto
	 * @return GroupeDto
	 * @throws RestException       : Erreur lors de la création du groupe ou niveau
	 *                             serveur (code différent de 201 Created)
	 * @throws ValidationException : Groupe est null
	 */
	public GroupeDto create(GroupeDto groupeDto) throws RestException, ValidationException {
		if (!groupeDto.getName().isEmpty() && groupeDto.getName() != null) {
			Builder builder = baseWebRessource.path("groups").accept(MediaType.APPLICATION_JSON);
			ClientResponse response = builder.post(ClientResponse.class, groupeDto);
			if (response.getStatus() != 201) {
				throw new RestException(response);
			}
			return byName(groupeDto.getName());
		} else {
			throw new ValidationException("Group is null");
		}
	}

	/**
	 * 
	 * Mise à jour du groupe
	 * 
	 * @param groupeDto
	 * @return GroupeDto
	 * @throws RestException       : Erreur lors de la mise à jour du groupe ou
	 *                             niveau serveur (code différent de 204 NoContent)
	 * @throws ValidationException : name du groupe est null ou vide
	 */
	public GroupeDto update(GroupeDto groupeDto) throws RestException, ValidationException {
		String nameGroup = groupeDto.getName();
		if (nameGroup != null && !nameGroup.isEmpty()) {
			Builder builder = baseWebRessource.path("groups/" + nameGroup).accept(MediaType.APPLICATION_JSON)
					.type(MediaType.APPLICATION_JSON);
			ClientResponse response = builder.put(ClientResponse.class, groupeDto);
			if (response.getStatus() != 204) {
				throw new RestException(response);
			}
			return byName(nameGroup);
		} else {
			throw new ValidationException("Group name is empty or null");
		}
	}

}
